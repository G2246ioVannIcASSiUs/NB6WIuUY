# 代码生成时间: 2025-10-01 21:55:31
# home_school_communication_app/__init__.py

# home_school_communication_app/apps.py
from django.apps import AppConfig


class HomeSchoolCommunicationAppConfig(AppConfig):
    name = 'home_school_communication_app'
    verbose_name = 'Home School Communication'


# home_school_communication_app/models.py"""
Models for the Home School Communication App.
"""
from django.db import models

class Message(models.Model):
    """Model representing a message between home and school."""
    student = models.ForeignKey('Student', on_delete=models.CASCADE)
    teacher = models.ForeignKey('Teacher', on_delete=models.CASCADE)
    content = models.TextField(help_text='Enter your message here.')
    date_sent = models.DateTimeField(auto_now_add=True)
    message_status = models.CharField(max_length=10, choices=[('unread', 'Unread'), ('read', 'Read')], default='unread')

    def __str__(self):
        return f"Message from {self.teacher} to {self.student}"


# home_school_communication_app/views.py
from django.shortcuts import render, get_object_or_404
from django.http import HttpResponse
from .models import Message
from django.views import View
from django.utils.decorators import method_decorator
from django.contrib.auth.decorators import login_required


class SendMessageView(View):
    """View for sending a message."""
    @method_decorator(login_required)
    def get(self, request, *args, **kwargs):
        # Rendering a form to send a message
        return render(request, 'home_school_communication/send_message.html')

    def post(self, request, *args, **kwargs):
        # Logic to handle the sending of a message
        try:
            message_content = request.POST.get('content')
            student_id = request.POST.get('student')
            teacher_id = request.user.id  # assuming the user is a teacher
            message = Message.objects.create(
                student_id=student_id,
                content=message_content,
                teacher_id=teacher_id
            )
            return HttpResponse("Message sent successfully!")
        except Exception as e:
            return HttpResponse("Error sending message: " + str(e), status=500)

# home_school_communication_app/urls.py
from django.urls import path
from .views import SendMessageView

urlpatterns = [
    path('send_message/', SendMessageView.as_view(), name='send_message'),
]

# home_school_communication_app/admin.py
from django.contrib import admin
from .models import Message

@admin.register(Message)
class MessageAdmin(admin.ModelAdmin):
    list_display = ['student', 'teacher', 'date_sent', 'message_status']
    list_filter = ['date_sent', 'message_status']
    search_fields = ['student__name', 'teacher__name', 'content']

# home_school_communication_app/tests.py
from django.test import TestCase
from .models import Message
from django.urls import reverse

class MessageTestCase(TestCase):
    def test_message_creation(self):
        # Creating a test message
        message = Message.objects.create(
            student=None,  # Assuming test setup
            content="Hello, this is a test."
        )
        # Verifying the message was created
        self.assertIsNotNone(message)

    def test_send_message_view(self):
        # Testing the send message view
        url = reverse('send_message')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)

    # Add additional tests as needed

# home_school_communication_app/migrations/0001_initial.py
# This file would be generated by Django's makemigrations command
# and should contain the initial schema for the database.

# Additional files such as forms.py, serializers.py and templates
# should be created following Django conventions as needed.